<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArraysMustBeAssignable" xml:space="preserve">
    <value>Arrays must be assignable.</value>
  </data>
  <data name="CachingReEntrancy" xml:space="preserve">
    <value>Nested iterations cannot be triggered inside RecordFilter implementations when caching is enabled.</value>
  </data>
  <data name="CannotInferEndianness" xml:space="preserve">
    <value>Cannot write record without being able to infer the endianness of the output file. Use a StartOfStreamRecord or Far as the first record.</value>
  </data>
  <data name="CodeGen_UnsupportedGenericLdc" xml:space="preserve">
    <value>Ldc&lt;T&gt; does not support T is {0}.</value>
  </data>
  <data name="ConverterTargetNotStdfRecord" xml:space="preserve">
    <value>{0} is not assignable from StdfRecord.</value>
  </data>
  <data name="CorruptDataMessage" xml:space="preserve">
    <value>{0} bytes of corrupt data found at offset {1}.</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>The directory does not exist ({0}).</value>
  </data>
  <data name="EndOfStreamException" xml:space="preserve">
    <value>Expected {0} more bytes while trying to read {1}.</value>
  </data>
  <data name="EndWithoutEOS" xml:space="preserve">
    <value>The stream of records ended prematurely. The last record consumed must be an EndOfStreamRecord.</value>
  </data>
  <data name="EOFInHeader" xml:space="preserve">
    <value>End of Stream encountered while reading record header.</value>
  </data>
  <data name="EOFInRecordContent" xml:space="preserve">
    <value>End of Stream encountered while reading record contents.</value>
  </data>
  <data name="EOFInSeekMode" xml:space="preserve">
    <value>End of Stream encountered while in seek mode.</value>
  </data>
  <data name="ErrorFiltersLocked" xml:space="preserve">
    <value>You cannot modify the filters after records have been read.</value>
  </data>
  <data name="FarLengthError" xml:space="preserve">
    <value>The FAR record length was not reported as 2.</value>
  </data>
  <data name="FarReadError" xml:space="preserve">
    <value>The FAR could not be fully read.</value>
  </data>
  <data name="FarRecordSubTypeError" xml:space="preserve">
    <value>The FAR record sub-type was not reported as 10.</value>
  </data>
  <data name="FarRecordTypeError" xml:space="preserve">
    <value>The FAR record type was not reported as 0.</value>
  </data>
  <data name="FixedLengthStringMustHaveDefault" xml:space="preserve">
    <value>Fixed-length string layouts must provide a missing value.</value>
  </data>
  <data name="InitialSequenceError" xml:space="preserve">
    <value>V4 sequence rules prohibit {0} int the state "{1}".</value>
  </data>
  <data name="InvalidGdrDataTypeCode" xml:space="preserve">
    <value>The data type code {0} is not defined in the STDF spec.</value>
  </data>
  <data name="InvalidRecordConverstionDefault" xml:space="preserve">
    <value>The unknown record type does not match the type of the converter.</value>
  </data>
  <data name="InvalidSaveAssembly" xml:space="preserve">
    <value>You can only save the dynamic assembly if debug is turned on and code has been generated.</value>
  </data>
  <data name="NegativeFieldIndex" xml:space="preserve">
    <value>FieldIndex must be greater than or equal to zero.</value>
  </data>
  <data name="NegativeOffset" xml:space="preserve">
    <value>Offset must be &gt;= 0.</value>
  </data>
  <data name="NoBitArrayArrays" xml:space="preserve">
    <value>BitArray fields do not support array layout attributes.</value>
  </data>
  <data name="NonConsecutiveFieldIndexDefault" xml:space="preserve">
    <value>The stdf field indexes for type {0} are not consecutive and/or unique.</value>
  </data>
  <data name="NonNullableField" xml:space="preserve">
    <value>There is no contingency for writing "NULL" to field index {0} of {1}.</value>
  </data>
  <data name="NoRegisteredUnconverter" xml:space="preserve">
    <value>The type {0} has no registered unconverter.</value>
  </data>
  <data name="NoStringArrays" xml:space="preserve">
    <value>String fields do not support array layout attributes.</value>
  </data>
  <data name="OffsetTooLarge" xml:space="preserve">
    <value>The offset is to large to be stored in an StdfRecord.</value>
  </data>
  <data name="SharedLengthViolation" xml:space="preserve">
    <value>Shared length arrays have differing lengths (length field index {0}).</value>
  </data>
  <data name="SOFBeforeEOF" xml:space="preserve">
    <value>Cannot start a new file before ending the current one.</value>
  </data>
  <data name="StringFieldLayoutNonString" xml:space="preserve">
    <value>StringFieldLayoutAttribute can only define fields of type String.</value>
  </data>
  <data name="StdfStringLessThanOne" xml:space="preserve">
    <value>Stdf strings must be at least 1 character long.</value>
  </data>
  <data name="StringTooLong" xml:space="preserve">
    <value>STDF only supports strings up to 255 characters long.</value>
  </data>
  <data name="UnconvertEndianMismatch" xml:space="preserve">
    <value>Can't unconvert unknown records with the wrong Endianness.</value>
  </data>
  <data name="UnsupportedArrayLengthType" xml:space="preserve">
    <value>Array length fields must be either ushort or byte ({0} not supported).</value>
  </data>
  <data name="UnsupportedGdrDataType" xml:space="preserve">
    <value>Don't know how to write {0} to a GDR.</value>
  </data>
  <data name="UnsupportedReaderType" xml:space="preserve">
    <value>No reader method for {0}.</value>
  </data>
  <data name="UnsupportedStdfFieldTypeMessage" xml:space="preserve">
    <value>This record converter factory does not support Stdf fields of type {0}.</value>
  </data>
  <data name="UnsupportedWriterType" xml:space="preserve">
    <value>No writer method for {0}.</value>
  </data>
  <data name="V4ContentState_AfterAtr" xml:space="preserve">
    <value>after ATR</value>
  </data>
  <data name="V4ContentState_AfterFar" xml:space="preserve">
    <value>after FAR</value>
  </data>
  <data name="V4ContentState_AfterMir" xml:space="preserve">
    <value>after MIR</value>
  </data>
  <data name="V4ContentState_AfterMrr" xml:space="preserve">
    <value>after MRR</value>
  </data>
  <data name="V4ContentState_AfterRdr" xml:space="preserve">
    <value>after RDR</value>
  </data>
  <data name="V4ContentState_AfterSdr" xml:space="preserve">
    <value>after SDR</value>
  </data>
  <data name="V4ContentState_AtEOF" xml:space="preserve">
    <value>at end of file</value>
  </data>
  <data name="V4ContentState_AtSOF" xml:space="preserve">
    <value>at start of file</value>
  </data>
  <data name="V4ContentState_BeforeSOF" xml:space="preserve">
    <value>before start of file</value>
  </data>
  <data name="V4ContentState_StdfBody" xml:space="preserve">
    <value>in the STDF body</value>
  </data>
  <data name="V4ContentState_Unknown" xml:space="preserve">
    <value>in unknown state</value>
  </data>
  <data name="WriteOutsideSOSEOS" xml:space="preserve">
    <value>Attempting to write outside of a StartOfStreamRecord/EndOfStreamRecord pair.</value>
  </data>
  <data name="RecordTooLong" xml:space="preserve">
    <value>STDF only supports records up to 65535 bytes long.</value>
  </data>
  <data name="ArrayTooLong" xml:space="preserve">
    <value>STDF only supports arrays up to {0} in length for field index {1} of {2}.</value>
  </data>
  <data name="TimeFieldLayoutNonDateTime" xml:space="preserve">
    <value>TimeFieldLayoutAttribute can only define fields of type DateTime.</value>
  </data>
</root>